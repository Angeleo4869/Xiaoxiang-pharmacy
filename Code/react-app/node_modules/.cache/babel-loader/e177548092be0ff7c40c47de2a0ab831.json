{"ast":null,"code":"/**\n * @jsx React.DOM\n */\nvar React = require('react'),\n    objectAssign = require('object-assign');\n\nvar Swiper = React.createClass({\n  displayName: 'Swiper',\n  propTypes: {\n    tagName: React.PropTypes.string,\n    component: React.PropTypes.element,\n    minSwipeLength: React.PropTypes.number,\n    moveThreshold: React.PropTypes.number,\n    onSwipe: React.PropTypes.func,\n    onSwipeLeft: React.PropTypes.func,\n    onSwipeUpLeft: React.PropTypes.func,\n    onSwipeUp: React.PropTypes.func,\n    onSwipeUpRight: React.PropTypes.func,\n    onSwipeRight: React.PropTypes.func,\n    onSwipeDownRight: React.PropTypes.func,\n    onSwipeDown: React.PropTypes.func,\n    onSwipeDownLeft: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tagName: 'div',\n      minSwipeLength: 75,\n      moveThreshold: 10\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      direction: null,\n      initialTouch: null,\n      touch: null,\n      swipeStart: null\n    };\n  },\n  render: function render() {\n    var Component = this.props.component || this.props.tagName;\n    return Component(Object.assign({}, this.props, {\n      onTouchStart: this.handleTouchStart,\n      onTouchEnd: this.handleTouchEnd,\n      onTouchCancel: this.handleTouchEnd,\n      onTouchMove: this.handleTouchMove\n    }), this.props.children);\n  },\n  handleTouchStart: function handleTouchStart(e) {\n    if (e.touches.length !== 1) {\n      return;\n    }\n\n    this._initiateSwipe(e.touches[0]);\n  },\n  handleTouchEnd: function handleTouchEnd(e) {\n    if (!this.state.direction) {\n      return;\n    }\n\n    if (this._getSwipeLength(this.state.initialTouch) > this.props.minSwipeLength) {\n      var method = this._getEventMethodName();\n\n      var evt = {\n        type: this._getEventTypeName(),\n        timeStampStart: this.state.swipeStart,\n        timeStampEnd: new Date(),\n        initialTouch: this.state.initialTouch,\n        finalTouch: this.state.touch\n      };\n      this.props.onSwipe && this.props.onSwipe(evt);\n      this.props[method] && this.props[method](evt);\n      e.preventDefault();\n    }\n\n    this._resetSwipe();\n  },\n  handleTouchMove: function handleTouchMove(e) {\n    if (e.touches.length !== 1 || !this.state.direction) {\n      return;\n    }\n\n    var touch = e.touches[0];\n\n    var direction = this._getSwipeDirection(touch);\n\n    if (this._isSwipeDirectionUnchanged(direction)) {\n      this._updateSwipe(direction, touch);\n\n      e.preventDefault();\n      return;\n    }\n\n    this._resetSwipe();\n  },\n  _initiateSwipe: function _initiateSwipe(touch) {\n    this.setState({\n      direction: {\n        x: null,\n        y: null\n      },\n      initialTouch: touch,\n      touch: touch,\n      swipeStart: new Date()\n    });\n  },\n  _resetSwipe: function _resetSwipe() {\n    this.setState(this.getInitialState());\n  },\n  _updateSwipe: function _updateSwipe(direction, touch) {\n    this.setState({\n      direction: direction,\n      touch: touch\n    });\n  },\n  _getSwipeLength: function _getSwipeLength(touch) {\n    return this._getSwipeLengthX(touch) + this._getSwipeLengthY(touch);\n  },\n  _getSwipeLengthX: function _getSwipeLengthX(touch) {\n    return Math.abs(touch.pageX - this.state.touch.pageX);\n  },\n  _getSwipeLengthY: function _getSwipeLengthY(touch) {\n    return Math.abs(touch.pageY - this.state.touch.pageY);\n  },\n  _getSwipeDirection: function _getSwipeDirection(touch) {\n    var dir = objectAssign({\n      x: null,\n      y: null\n    }, this.state.direction);\n\n    if (this._getSwipeLengthY(touch) > this.props.moveThreshold) {\n      dir.y = this._getSwipeDirectionY(touch);\n    }\n\n    if (this._getSwipeLengthX(touch) > this.props.moveThreshold) {\n      dir.x = this._getSwipeDirectionX(touch);\n    }\n\n    return dir;\n  },\n  _getSwipeDirectionX: function _getSwipeDirectionX(touch) {\n    return touch.pageX < this.state.touch.pageX ? 'Left' : 'Right';\n  },\n  _getSwipeDirectionY: function _getSwipeDirectionY(touch) {\n    return touch.pageY < this.state.touch.pageY ? 'Up' : 'Down';\n  },\n  _getSwipeDirectionName: function _getSwipeDirectionName() {\n    return (this.state.direction.y || '') + (this.state.direction.x || '');\n  },\n  _isSwipeDirectionUnchanged: function _isSwipeDirectionUnchanged(direction) {\n    return (!this.state.direction.x || this.state.direction.x === direction.x) && (!this.state.direction.y || this.state.direction.y === direction.y);\n  },\n  _getEventMethodName: function _getEventMethodName() {\n    return 'onSwipe' + this._getSwipeDirectionName();\n  },\n  _getEventTypeName: function _getEventTypeName() {\n    return 'swipe' + this._getSwipeDirectionName();\n  }\n});\nmodule.exports = Swiper;","map":null,"metadata":{},"sourceType":"script"}